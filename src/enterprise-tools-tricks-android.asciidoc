= Enterprise Infrastructure, Tools and Tricks for Teams Developing Android Applications
:author:    Manfred Moser, simpligility technologies inc.
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:toc!:
:slidetitleindentcar: 
:copyright: 2013, simpligility technologies inc., CreativeCommons Attribution-Noncommercial-No Derivative Works 3.0(http://creativecommons.org/licenses/by-nc-nd/3.0/us)


== About Manfred Moser

* Runs his own little company http://www.simpligility.com[simpligility
  technologies inc.]

* Worked at and helps companies between 2 and 2000+ developers

* Developer and system administrator with long (> 10 years) interest in
  development tooling

* Open source project lead https://code.google.com/p/ksoap2-android/[ksoap2-android], https://code.google.com/p/maven-android-plugin/[Android Maven Plugin]

* Author of multiple books (Nexus, Hudson, Maven, Sonatype CLM)

* Presenter at various conferences AnDevCon, OSCON, JUC, ... 

* Founder of http://www.mosabuam.com/vijug/blog/[VIJUG] and https://plus.google.com/112826376355061333205/posts[GDG Victoria BC]

== Objectives

* What to look out for when growing

* Overview of categories of tools and their use 

* Find out about some great libraries

TIP: Please interrupt me and ask questions - this should be an open conversation!

== What Is Our Scenario? 

You are somewhere along the path from 

* a small company

** one or two, up to a handful of people

* with a successful app

* and maybe a server side backend

to

* a larger company

** dozens to thousands of people

* with multiple applications

** probably on multiple platforms

* and a large server backend system  

*Congratulations! You will see, it is an exciting ride!*

== What We *Will Not* Talk About...

Growing a company means, that you have dedicated people and tools for things like

* finance

* human resources 

* sales

* marketing

* ...

but we will *not* cover all those aspects. 

== What We *Will* Talk About...

Growing a *software development team* means things like

* more specialization 

** dedicated QA

** dedicated backend developers

** dedicated app developers (per platform potentially)

** and yes, dedicated managers (or at least people with part time
   management duties) 

* more formalization of procedures

** agile methodologies e.g. XP, SCRUM, Kanban

** hopefully not waterfall...

** there is an entire industry around for that stuff -> be careful

* more *development infrastructure and tooling*

** this will be our focus

** so more details coming later  image:images/emoticons/wink.png[scale=100]


== Big Picture Things To Consider

There are a lot of other aspects.. 

* I found the following to be often overlooked or merely evolving 

* rather than being a conscious decision 

* which makes it harder to change

== Big Picture Things To Consider - Distributed Company

Are you running a distributed company? 

* might only mean that people are allowed to work from home once a
   week

* affects culture of communication and interaction

* wider choice of people - the whole world potentially

* virtual infrastructure


== Big Picture Things To Consider - Core Competency

What is your core competency?

* if it is not website creation - don't start coding your own

* same for finance, marketing, HR and so on

* but in the beginning you will have to do lots of different things
   yourself

* and when you are very large you might want to control some of them

TIP: Choose wisely what you take care of yourself, and what you pay
others to do for you!


== But That Is Enough High Level Talk

Let's move on to

*Software Development*

and 

*Related Tooling*

== Simple App Development 

Used to be like this...

* simple codebase

* one project

* Eclipse used to build and release app on developer machine

* manual QA

* manual upload to app store

* application not internationalized (i18n)

* no server backend system integrated

* one target form factor (phone)

== Complex App Development - Codebase

And now...

* complex app code

* multiple external libraries (components) 

* multiple internal components used

* components used across server backend and mobile app

* multiple apps

* multiple target form factors

** phone, tablet, TV, desktop and others
 

== Complex App Development - Building

* Eclipse, IntelliJ and others used by developers

* Command line build becomes important

** Apache Ant, make, Gradle, Apache Maven

* Release build on "build machine" -> Continuous integration server usage


== Complex App Development - People

Now a lot more people are involved

* developers

** write and test code

* testers

** write test code and run it 

** and do explorative testing

* managers

** unavoidable, but stay nimble

* writers

** don't forget documentation!

TIP: There will be other specialized roles like build master, release
manager and many more.  

== Complex App Development - How? 

With all these complexities..

*How can you manage all that?*

* formalization and standardization of procedures

* tooling


== Formalization Of Procedures - The Problem

* http://en.wikipedia.org/wiki/Cowboy_coding[cowboy coding]

* rampant choice and therefore complexity

* potentially no testing

* ad hoc deployments to production

* large difference between code style and patterns across code base

* fixing things right in production 

-> These things do not fly anymore --  the stakes are too high

== Formalization Of Procedures - The Benefits

* avoid communication issues and other friction

* provide stability for users and yourself

* easier for new people as well 

* keep code base maintainable

* produce higher quality apps

* avoid huge costs of failure


== Formalization Of Procedures - Agile 

* IT is very fast paced.

* Mobile is even faster.

* You have to keep up to compete

->  You have to use some sort of agile process

TIP: Try for some http://www.simpligility.com[simpligility] -
simplicity and agility combined l  image:images/emoticons/wink.png[scale=100]

== We Don't Need "Agile"!

Often a sentiment found typically in 

* heavily regulated sectors like health, ..

* government 

* or other slower market

->Using agile methodologies will give you an edge over your
  competitors

== Tips For Introduction

Just some quick tips

* Don't be religious about following one method

* Don't buy into the money milking machine of endless consulting and certifications

* But get help to find your own way

* Make it part of the company culture

* Be prepared... it won't be easy! But it will be worth it.

IMPORTANT: A lot of this should be common sense.


== Tools Beyond Development 

You will need these to some extent and they do affect development.

* Customer Relationship Management 

** goes beyond using the play console

* Website

** parts might have to be embedded in your application

* User interaction tools like forums, mailing lists, support systems,
  issue tracker

* Bookkeeping, Inventory,  - order management, in app payments integration

TIP: You might have to integrate with or use them, but we will not
focus on these.

== Development Tools You Will Need

Directly used by development

* Issue tracker
 
** for internal use

** and potentially customer usage

* Version control system

** distributed or centralized

** maybe some of your components are open source

IMPORTANT: Imho these are a *must have*!  Do we need to discuss why?

== Development Tools You Might Want

For your development you might want

* Build system

** to be able to automate your build

* Quality Metrics and Analysis Tools

** taking care of your own code

* Testing Facilities and Tools

** making sure code does what it is intended to

* Continuous Integration Server

** making sure things work all the time

* Repository Manager

** store all your internal and external components 

** provide build performance and stability

* Component Lifecycle Management

** for security and license analysis and monitoring of components

IMPORTANT: Which are a must have will depend on who you ask, but imho
you need them all  image:images/emoticons/wink.png[scale=100]


== Tooling

Get something off the shelf or write your own? 

* Do NOT reinvent the wheel, just because you can

* These system are all simple, but only on the surface!

* Maybe write some glue code for integrating different systems

* Focus on your business, not your tools!

== Tooling Infrastructure

Where and who to run it all?

* Depends on the company structure

** distributed or not, how many locations...

* Who controls hardware

** you might need access e.g. for attaching hardware devices

* Where is it located 

** your own datacenter

** provider

** potentially legal restrictions for location (

* Saas, Paas or DIY

** Software as a Service

** Platform as a Service

** Do it yourself

== Build System

Command line build is necessary for automation!

* Ant 

** Android integration from Google is deprecated!

* make

** used in AOSP - do not use this yourself if you can avoid it

* http://www.gradle.org/[Gradle]

** http://tools.android.com/tech-docs/new-build-system[new Android plugin] for Gradle

** managed by Google

* http://maven.apache.org/[Apache Maven]

** https://code.google.com/p/maven-android-plugin/[Android Maven Plugin]

** very powerful and mature

** open community

* others like http://www.scala-sbt.org/[sbt] are exotic but can be used too... 

TIP: As project manager for the Android Maven Plugin you know what I
would recommend...

== Issue Tracking

aka bug tracker, support ticket, ...

Examples are

* http://www.atlassian.com/software/jira[Atlassian JIRA]

* http://www.bugzilla.org/[Bugzilla]

* http://www.jetbrains.com/youtrack/[JetBrains YouTrack]

* http://bestpractical.com/rt/[Request Tracker]

* *Many* others e.g. see
   http://en.wikipedia.org/wiki/Comparison_of_issue_tracking_systems[the
   list on wikipedia]

TIP: Most systems are available as SaaS, which can considerably reduce maintenance.

== Version Control Systems

Keep track of every change of the committed text

* can be source code

* or other text based files (books, laws, xml .. whatever)

* not so good for binary

Two major groups are centralized and distributed systems - although
you can run a DCS in a centralized manner.. 

* http://git-scm.com/[Git], http://mercurial.selenic.com/[Mercurial Hg], http://bazaar.canonical.com/en/[Bazaar]...

* http://subversion.apache.org/[Subversion], http://cvs.nongnu.org/[CVS], http://www.perforce.com/[Perforce],...

Many more open source and proprietary ones are out there.

TIP: Imho... just use git 


== Code Review System

A platform to discuss code changes, evolved from patch sets on mailing
lists. 

* https://code.google.com/p/gerrit/[Gerrit]

* http://www.reviewboard.org/[Review Board]

* http://www.atlassian.com/software/crucible/overview[Atlassian Crucible]

* http://smartbear.com/products/software-development/code-review[SmartBear Collaborator]

* Wikipedia has a
  http://en.wikipedia.org/wiki/List_of_tools_for_code_review[list]

TIP: While pair programming is useful, a review system allows remote
collaboration and time-shifted reviews. Very handy!

== Development Saas

Common a collection of

* issue tracker

* version control system 

* code review system 

* other additions like wiki, forum, mailing list, notification
  services...

Often free for open source, sometimes with commercial extension

* http://sourceforge.net/[SourceForge]

* https://code.google.com/[GoogleCode]

* https://launchpad.net/[Launchpad]

* https://bitbucket.org/[Bitbucket]

* https://github.com/[GitHub]

TIP: There are commercial only solutions like MS TFS and others as well.

== Continuous Integration

Every commit to you VCS 

triggers a build

integrating changes from all developers

executing compilation, test execution...

* http://www.hudson-ci.org[Eclipse Hudson]

* http://www.jenkins-ci.org[Jenkins]

* https://travis-ci.org[Travis]

* and many more

TIP: Dedicated introduction to CI on Friday morning available on https://github.com/simpligility/introduction-to-continuous-integration-for-android-developers[github]

== Managing Dependencies And Libraries

With the complex application structure binary components in the form
of dependencies become critical for 

* reducing build times 

* breaking up the complexity

* allowing distributed development 

** in terms of teams working on components 

** and geographically

* being able to use external components easily

== So What Is A Component

Anything app needs in order

* build it

* run the tests

* produce the distributable apk 

** with some components needed at runtime

TIP: Often components are also called *dependencies* or *artifacts*.

== Legacy Approach With Eclipse/Ant

Stick it into libs

Add it manually to the class-path in Eclipse

Track changes as large binary file changes in your VCS

IMPORTANT: with rapidly changing binaries and numbers going up, this
does *not* scale

== Declarative Dependency Management

Introduced by *Apache Maven* into the JVM world.

Now also used by Apache Ant with *Apache Ivy* and importantly *Gradle*.

-> Instead of binary files in VCS you merely reference a unique
   identifier to a component in a build file

Components are stored in *repositories*.

== Identifying a Component - Coordinates

Components are *uniquely* defined by their coordinates.

* establish a global name-space for artifacts

* similar to package names in Java

* *g* roupId, *a* rtifactId, *v* ersion - GAV

* optionally classifier and packaging

TIP: Analogy -> Longitude and latitude establishes a geographical
namespace or DNS for web sites.


== Maven Repository Format

Standard introduced by Maven but understood by build systems like

* Apache Maven

* Gradle

* Apache Ivy

* Grails

* Gant

* sbt

* Leiningen

TIP: And once you understand the structure everything is also easily
available via http.


== Maven Repository Format 

Uses the coordinates. Coordinates map to specific
locations in a Maven repository.

----
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-core</artifactId>
  <version>3.4.1</version>
</dependency>
----

Maps to:

----
org/apache/camel/
                 camel-core/
                            3.4.1/
    camel-core-3.4.1.pom
    camel-core-3.4.1.jar
----

File names are created using

----
artifactId-version-classifier.packaging
----


Classifiers javadoc and sources are appended to file name: 
----
    camel-core-3.4.1-javadoc.jar
    camel-core-3.4.1-sources.jar
----

TIP: Other repository formats use a different structure, but the Maven
structure is understood and used by many tools.

== Central Repository

aka MavenCentral

* available at http://search.maven.org

* largest repository of Java components and beyond

* introduced with Apache Maven > 10yrs ago

* default repository in Apache Maven and other build tools

* can be added easily if not default (e.g. in gradle) 

== Referencing A Component - Part 1

Referencing a jar file::


Apache Maven pom.xml

----
<dependencies>
  <dependency> 
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.2.2</version>
  </dependency>
</dependencies>
----

Gradle build.gradle (long and short form below)

----
dependencies {
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', 
                  version: '2.2.2'
  compile 'com.fasterxml.jackson.core:jackson-core:2.2.2'
}
----

TIP: Check out the Dependency Information section on the Central Repository


== Referencing a Component - Part 2

*Scope* defines when a component is needed (

----
provided group: 'org.gradle.test.classifiers', name: 'service', 
                version: '1.0', classifier: 'jdk14'
----

Type/Packaging::

Maven example
----
<dependency>
  <groupId>com.viewpagerindicator</groupId>
  <artifactId>library</artifactId>
  <version>2.4.1</version>
  <type>apklib</type>
</dependency>
----

Gradle example
----
runtime group: 'org.groovy', name: 'groovy', version: '2.0.5', ext: 'jar'
----


== Jar, Apklib and Aar

* jar - java archive

** only java classes

** no android resources

* apklib 

** introduced by the Android Maven Plugin

** android resources

** transitive dependencies

** nested native components 

** stable

* aar - Android archive

** successor of apklib

** introduced by Gradle build system

** not yet supported in Android Maven Plugin

** experimental!


== Adding Repositories

Apache Maven::

* global per user in settings.xml 

* per project in pom.xml (discouraged!)

Gradle:: 

* can only add on per project basis
+
----
repositories {
    mavenCentral()
    maven {
        url "https://repository.mycompnay.com/content/groups/public"
    }
}
----

TIP: Ideally just reference one repository manager in your
organization, and add more references there - demo time!

== What is a Repository?

* Organized storage and access container for artifacts

* Uses artifact coordinates for structure

-> A Repository Manager helps with administration and usage

== Repository Manager Tasks

* proxy and managing access to public repositories

* storing components that are not in public repositories

* managing releases and snapshots

* controlling available and allowed components

-> Facilitate internal collaboration across components and teams

== Repository Manager as Center Hub

image::images/nexus-tool-suite-integration.png[scale=100]

* http://www.sonatype.org/nexus/[Sonatype Nexus]

* http://archiva.apache.org/index.cgi[Apache Archiva]

* http://www.jfrog.com/home/v_artifactory_opensource_overview[JFrog Artifactory]


== Maven Android SDK Deployer

* publish Android SDK components to repository manager

* https://github.com/mosabua/maven-android-sdk-deployer

* Google does not provide components in any repository!

== Component Lifecycle Management

Your app includes all the components so you are responsible for

* license usage implications

* security issues

-> http://www.sonatype.com/clm/overview[Sonatype CLM]

Allows you to control and work with components and inspect their
security and license characteristics in 

* CI server

* IDE

* Repository Manager

== Looking for Components

Problem of discoverability .. just like for apps.

A lot of it is word of mouth, but check out

* github

* google code

* source forge

* ask on G+, twitter and stackoverflow

== Plain Java Components Suitable for Android

Your mileage may vary...

* https://sites.google.com/site/gson/[gson]

* http://jackson.codehaus.org/[Jackson]

* tons more


TIP: Sometimes you can tricks things into working with shading code
into a different package. E.g. https://github.com/rtyley/spongycastle[spongycastle]

== Android Frameworks

Lots of different ones available, with varying scope

* https://github.com/roboguice/roboguice[RoboGuice]

* https://github.com/mttkay/ignition[Ignition]

* http://androidannotations.org/[Android Annotations]

TIP: Frameworks for gaming a whole other topic...

== Specific Tools

* http://square.github.io/dagger/[Dagger] -- Dependency Injection Framework

* http://square.github.io/otto/[Otto] -- EventBus

* https://github.com/square/okhttp[OkHttp] -- HTTP and SPDY client


== Android UI Widgets and Tools

* https://github.com/JakeWharton/ActionBarSherlock[ActionBarSherlock] 

* https://github.com/JakeWharton/Android-ViewPagerIndicator[View Pager
  Indicator]

* http://greendroid.cyrilmottier.com/[GreenDroid]

* https://github.com/github/gauges-android[Gauges Android]

* https://code.google.com/p/achartengine/[achartengine]

TIP: Ask around on G+ and search around a bit, there is *lots* out there.


== Testing Tools

More and more becoming mainstream and mature

* https://code.google.com/p/robotium/[Robotium]

* https://github.com/robolectric/robolectric/[Robolectric]

* http://square.github.io/fest-android/[FEST Android]

* https://github.com/square/spoon[Spoon]

* https://github.com/appium/appium[Appium]

* https://github.com/rtyley/android-screenshot-lib[Android Screenshot
  Lib] e.g. integrated in the https://code.google.com/p/maven-android-plugin/[Android Maven Plugin]

== More Links




== Whats Next? 

* Fireside chat about Android development growing up

** Wednesday, May 29, 7:30-9:30 PM

** Hosted with Robert Green and a panel full of Android pros

** Ask questions and get tips and tricks from the pros!

* Introduction to Continuous Integration Server Usage Focusing on
  Android Development  

** Friday, May 31, 8:30-9:45 AM

== Questions and Answers

