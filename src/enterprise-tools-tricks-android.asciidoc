= Enterprise Infrastructure, Tools and Tricks for Teams Developing Android Applications
:author:    Manfred Moser, simpligility technologies inc.
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:toc!:
:slidetitleindentcar: 
:copyright: Copyright 2013, simpligility technologies inc., All Rights Reserved.


== About Manfred Moser

* Runs his own little company http://www.simpligility.com[simpligility
  technologies inc.]

* Worked at and helps companies between 2 and 2000+ developers

* Developer and system administrator with long (> 10 years) interest in
  development tooling

* Open source project lead https://code.google.com/p/ksoap2-android/[ksoap2-android], https://code.google.com/p/maven-android-plugin/[Android Maven Plugin]

* Author of multiple books (Nexus, Hudson, Maven, Sonatype CLM)

* Presenter at various conferences AnDevCon, OSCON, JUC, ... 

* Founder of http://www.mosabuam.com/vijug/blog/[VIJUG] and https://plus.google.com/112826376355061333205/posts[GDG Victoria BC]

== Objectives

* What tools to look at when growing

* Find out about some great libraries and tools

* 


Have you been developing Android applications for a while? On your
own? And there is just too much to do? Congratulations! But what next?
Android application development is growing up, and larger and larger
teams are working on multiple mobile applications. And these
applications have to tie back into one or many server-side enterprise
applications. The complexity of a typical Android application requires
the use of a number of external libraries for interoperating with Web
services and other systems; abstracting the Android API across
platform versions; improving the performance or maintainability of the
source code; and many more aspects. Learn about a number of great
libraries available as open source, where to get them, and how to
start including them into your application easily.

As a next step, we will learn about repository management. Learn how
to enjoy great build performance and stability, and how to gain access
to an easy mechanism to distribute your own libraries and components
internally as well as to partners and clients. Once you are using a
repository manager, you will be able to easily distribute your
applications across teams and potentially implement a multi-stage
release process with notifications and rollbacks, if necessary.

Using all these libraries brings tremendous benefits to you. It
however also means that you are responsible for license compliance,
and we will show you some accepted practices for ensuring that your
applications comply. Unfortunately, these components can be affected
by security issues as well. We will examine the ideas of Component
Lifecycle Management, and check out some of the tools available to
help you take control over potential security and license issues.

Once your development efforts scale even further, you will need to
examine your version-control system usage. We will look at a few
practices for using branches effectively and ensuring that development
efforts on multiple features integrate well. Adding a continuous
integration server into your development infrastructure will allow you
tie everything together.

== What is Our Scenario? 

You are somewhere along the path from 

* a small company

** one or two, up to a handful of people

* with a successful app

* and maybe a server side backend

to

* a larger company

* with multiple applications

* and a large server backend system  

IMPORTANT: Congratulations! You will see, it is an exciting ride!

== What We Will NOT Talk About...

Growing a company means that you have dedicated people for things like

* Finance

* HR

* Sales

* Marketing

* ...

but we will not cover all those aspects. 

== What We Will Talk About...

Growing a software development team means things like

* more specialization 

** dedicated QA

** dedicated backend developers

** dedicated app developers (per platform potentially)

** and yes, dedicated managers (or at least people with part time
   management duties) 

* more formalization of procedures, hopefully agile!

** XP, SCRUM, Kanban

** hopefully not waterfall...

** there is an entire industry around for that stuff, be careful

* more *development infrastructure and tooling*

** this will be our focus

** so more details coming later ;-) 


== Big Picture Things to Consider

There are lot of other aspects.. 

* I found these to be often overlooked or merely evolving 

* rather than being a conscious decision 

* which makes it harder

== Big Picture Things to Consider

What to consider and think about ..

* Distributed company? 

** affects culture of communication and interaction

** wider choice of people

** virtual infrastructure

* What is your core compentency?

** if it is not website creation - don't start coding your own

** same for finance, marketing, HR and so on

** but in the beginning you will have to do lots of different things
   yourself

** and when you are very large you might want to control some of them

TIP: Choose wisely what you take care of yourself and what you pay
others to do for you!


== Let's move on to

* Software Development 

and 

* Related Tooling

== Simple App Development 

Used to be like this:: 

* simple codebase

* one project

* Eclipse used to build and release app on developer machine

* manual QA

* manual upload to app store

* application not internatioalized (i18n)

* no server backend system integrated

== Complex App Development - Codebase

And now...

* Complex app code

* multiple external libraries (components) 

* multiple internal compornents used

* components used across server backend and mobile app

* Multiple apps

== Complex App Development - Building

* Eclipse, Intellij and others used by developers

* Command line build becomes important

* Release build on "build machine" -> Continuous integration server usage


== Complex App Development - People

Now a lot more people are involved

* developers

* testers

* managers

* writers

** don't forget documentation!

With all these complexities, how can you manage all that

* Formalization and Standarization of Procedures

* Tooling


== Formalization of Procedures

* Cowboy coding, 

* No testing

* Ad hoc deployments to production or

* Fixing things right in prodcution 

-> These things do not fly anymore --  the stakes are too high

Need some sort of process

* avoid communication issues and other friction

* provide stability for users and yourself

* easier for new people as well 

== Formalization of Procedures - Agile 

* IT is very fast paced.

* Mobile is even faster.

* You have to keep up to compete

->  You have to use some sort of agile process

== We Don't Need "Agile"!

Typically in 

* regulated sectors like health, 

* government 

* or other slower market

->Using agile methodologies will give you an edge over your competitors


== Tools Beyond Development 

You Will Need these to some extent and they do affect development::

* Customer Relationship Management (goes beyond using the play
  console)

* Website - parts might have to be embedded in your application

* User interaction tools like forums, mailing lists, support systems,
  issue tracker

* Bookkeeping - order management, in app payments integration

TIP: You might have to integrate with or use them, but we will not
focus on these.

== Development Tools You Will Need

Directly used by development

* Issue tracker
 
** for internal and customer usage

* Version control system

** distributed or centralized

IMPORTANT: Imho these are a *must have*!  

== Development Tools You Might Want

* Continuous Integration Server

* Repository Manager

* Component Lifecycle Management tool

** for security and license analysis

* Quality Metrics and Analysis
 
* Testing Facilities and Tools

IMPORTANT: Which are a must have will depend on who you ask...


== Tooling Infrastructure

in the cloud or not? 


== Before We Look At The Tools In Detail

let's look at the apps and components 

add slides about 

Eclipse build

Ant

Maven

Gradle

APKLIB

AAR

Android Specific Examples

RoboGuice

ActionBarSherlock

Spoon

Otto

GreenDroid

Appium 

Robotium

...

== Issue Tracking

== Version Control Systems


== Code Review System

== Continuous Integration


== Repository Management





== Component Lifecycle Managment






== More Links




== Whats Next? 

* Fireside chat about growing up

** Wednesday, May 29, 7:30-9:30 PM

** With Robert Green, Jake Wharton, Mike Wolfson and others

** Ask questions and get tips and tricks from the pros!

* Introduction to Continuous Integration Server Usage Focusing on
  Android Development  

** ./Friday, May 31, 8:30-9:45 AM

